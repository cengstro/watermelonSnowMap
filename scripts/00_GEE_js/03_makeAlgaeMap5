/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var vowell = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-116.81248224946974, 50.75365760611353],
          [-116.81248224946974, 50.74485997035237],
          [-116.79806269380568, 50.74485997035237],
          [-116.79806269380568, 50.75365760611353]]], null, false),
    forestPath = ee.FeatureCollection("projects/ee-caseyengstrom/assets/globalSnowAlgae/2_trainDat/trainclean2_trees"),
    glacierImages = ee.ImageCollection("projects/ee-caseyengstrom/assets/globalSnowAlgae/1_glacierImages2/glacierImages2"),
    regions = ee.FeatureCollection("projects/ee-caseyengstrom/assets/globalSnowAlgae/regions_plus_thresholds");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*
the map annotation is the limiting factor, use tilescale to surmount

tile scale 8:
northGreenland 
northwestGreenland


tilescale 2: 
alaskaRange
coastNorth 
highMtnAsia 
andes
southwestGreenland
southeastGreenland
eastCentralGreenland
westCentralGreenland
northeastGreenland
northGreenland
northwestGreenland
ellesmere
baffin
svalbard
russianArctic 
kamchatka 
iceland 
norwaySouth 

tilescale 1: 
alaskaPeninsula 
cascades
brooks
antarcticaNoSheet 
newZealand
caucasus
coastSouth
interiorNorth
interiorSouth
norwayNorth
alps
altai
*/
var myFunctions = require('users/caseyengstrom/globalSnowAlgae:00_myFunctions')


var maxCC = 50 // max allowable cloud cover per image
var maxSza = 75
var startYear = 2019
var endYear = 2022
var dayInc = 5

// ROI selectors
var myTileScale = 1 // to allow reduceRegion to succeed
var regionName = "alaskaPeninsula" 
var rangeList = [regionName]





// export settings
var threshLvl = 'thrsRF1' // select a classification threshold from the FIRST polygon in rangeList
var res = 50 // resolution of map, in meters
var myCrs = 'EPSG:4326' 



var decisionTrees = myFunctions.decodeFeatureCollection(forestPath)	
var trainedClassifier = ee.Classifier.decisionTreeEnsemble(decisionTrees).setOutputMode('raw')				
var glacierImage = glacierImages.mosaic()
var glacierMask = glacierImage.unmask(0)
Map.addLayer(glacierMask, {min:0, max:1, palette:['black','white']}, 'glacier mask')



// (1) image filtering ---------------------------

// print(regionName, rangeList)
var myRegions = regions.filter(ee.Filter.inList('name', rangeList)).aside(print)
var thresh = myRegions.first().getNumber(threshLvl).aside(print, "threshold")
var roi = myRegions.geometry().aside(Map.addLayer)

// this function will automatically filter jan-feb for southern hemisphere, otherwise 7-8 for north
var myS2 = myFunctions.filterS2ForAlgae({
  roi: roi, 
  maxCloudCover: maxCC,
  minSnowPercent: 0.5, 
  maxSZA: maxSza,
  startYear: startYear,
  endYear: endYear
});
print(myS2.sort('system:time_start', false).first().date(), "last image date") // check image date matches hemisphere 
print(myS2.size(), "n images used in composite")
print(myS2)

// (2) make mosaics ------------------------------

var millisInWeek = 1000*60*60*24*dayInc;
var milliList = ee.List.sequence(
  ee.Date("2019-01-01").millis(), 
  ee.Date("2022-09-01").millis(), 
  millisInWeek
)

var weeklyMosaics = ee.ImageCollection.fromImages(
  milliList.map(function (milli) {
    var date = ee.Date(milli);
    var images = myS2
      .filterDate(date, date.advance(dayInc,'day')) 
      .sort('CLOUDY_PIXEL_PERCENTAGE'); // clear images will be on top
    
    // if there are images in the specified date range, add the mosaic to the collection, 
    return ee.Algorithms.If(images.size().neq(0), images.mosaic());
}));
print(weeklyMosaics.size(), "n weekly mosaics")
Map.addLayer(weeklyMosaics.first())

// (3) Classify weekly mosaics ------------------------

var classifiedImages = weeklyMosaics.map(function(image){
  var plusNDs = myFunctions.addNormalizedBands(image); // all bands normalized
  var redMask = myFunctions.redSnowMask(plusNDs); // pre-processing step, mask non-red snow
  var maskedImage = plusNDs.updateMask(redMask).updateMask(glacierMask);

  // using precomputed decision trees
  var raw = maskedImage.classify(trainedClassifier, 'raw');
  var probability = raw.arrayReduce(ee.Reducer.mean(), ee.List([0])).arrayGet(0).rename('CLASS_PROB')	// per pixel probability
  return probability
});
Map.addLayer(classifiedImages.first())

// (4) make a max value composite ----------------
// more efficient to do this once, rather than using arrayReduce mode to get classification per image

var composite = classifiedImages.max() 
var classification = composite.select('CLASS_PROB').gt(thresh).rename('CLASS') 
composite = composite.addBands(classification)
// print(composite.bandNames())
Map.addLayer(composite)

// (5) annotate --------------------------------
var areaImage = ee.Image.pixelArea().divide(1000*1000) // in km2
var glacierAreaImage = glacierImage.multiply(areaImage).rename('glacier_km2')
var algaeAreaImage = composite.select('CLASS').multiply(areaImage).rename('algae_km2')

var stats = glacierAreaImage.addBands(algaeAreaImage)
  .reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: roi,
    scale:res,
    maxPixels: 1e13,
    tileScale: myTileScale
  })
var algaeArea =   ee.Number(stats.get('algae_km2'))
var glacierArea =   ee.Number(stats.get('glacier_km2'))
var pct = algaeArea.divide(glacierArea)

composite = composite.set({
  "system:footprint": roi,
  "ranges": ee.String.encodeJSON(rangeList),
  "region":regionName,
  "max_sza":maxSza,
  "max_cc":maxCC,
  "mosaic_day_inc":dayInc,
  "n_images":myS2.size(),
  "training_data":"trainclean2",
  "threshold":thresh,
  "crs":myCrs,
  "resolution_m": res,
  "glacier_km2":glacierArea,
  "algae_km2": algaeArea,
  "percent":pct
});
  
  
// (7) export ----------------------------  
  
var bn = regionName +  "_RF1"
Export.image.toAsset({
  image: composite,
  description: bn,
  assetId: 'globalSnowAlgae/3_algaeMaps4/' + bn,
  scale: res,
  maxPixels:1e13,
  crs: myCrs
})

// scratch -----------------------------

// // on the fly trees
// var trainingData = ee.FeatureCollection("projects/ee-caseyengstrom/assets/globalSnowAlgae/2_trainDat/"+trainingDataFilename);
// var classifier = ee.Classifier.smileRandomForest({
//     numberOfTrees: 500, 
//     variablesPerSplit: 3,
//     minLeafPopulation: 2, 
//     seed: my_seed
// }).setOutputMode('PROBABILITY')
// var my_bands = ["ND2_1","ND5_2","ND5_3","ND6_2","ND4_2","ND2_8A","ND2_9",
// "ND5_6","ND4_8","ND2_7","ND5_4","ND6_3","ND2_8","ND4_6","ND2_11","ND2_12",
// "GBND","NDSI","RGND",
// "B1","B2","B3","B4","B5","B6","B7","B8","B8A","B9","B11","B12"]
// var trainedClassifier = classifier.train(trainingData, 'CLASS', my_bands);

  
  // using on the fly trees
  // var probability = maskedImage.classify(trainedClassifier, 'CLASS_PROB');
  

  // .map(function(i){ // remove images with low % cover of ROI
  //   var intersection = i.geometry().intersection(roi)
  //   return i.set("area_in_roi",intersection.area(1000))
  // }).filter(ee.Filter.gt("area_in_roi", area_in_roi))
  
  // set the projection to match the input image
// var myPrj = myS2.first().select("B2").projection()
// var myCrs = myPrj.crs().getInfo()


    // var dateProperties = {
    //     'date': date.format("YYYY-MM-dd"), 
    //     'milli':milli
    //   };.set(dateProperties)
    
    // var hrs = ee.Number(milli).divide(1000).divide(3600).toInt() // convert millis to hrs since unix epoch
    // var hrsImage = ee.Image.constant(hrs).toInt32().rename('hrs')
    // .addBands(hrsImage)
    // var composite = classifiedImages.qualityMosaic('CLASS_PROB') // including the date of the maximum probability